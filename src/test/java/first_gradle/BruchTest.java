/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package first_gradle;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.Test;

@TestMethodOrder(MethodOrderer.Alphanumeric.class)
class BruchTest {
	private Bruch b;
	
	@BeforeEach
	public void setUp() throws Exception {
		b=new Bruch();
	}

	@AfterEach
	public void tearDown() throws Exception {
		b=null;
	}

	@Test
	@DisplayName("Test des Konstruktors: default Konstruktor")
	public final void testConstructorBruch() {
		assertEquals(b.quotient(),0.0,0.01);
	}
	
	@Test
	@DisplayName("Test des Konstruktors: mit einem zaehler=4")
	public final void testConstructorBruchInt() {
		int expected =4;
		Bruch b2=new Bruch(expected);
		int actual=b2.getZaehler();
		assertEquals(expected,actual);
	}

	
	@DisplayName("Test des Konstruktors: mit zaehler=1 und nenner=8")
	@Test
	public final void testConstructorBruchIntInt() {
		int zaehler = 1;
		int nenner = 8;
		double expected =(double)zaehler/nenner;
		Bruch b2=new Bruch(zaehler,nenner);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}
	@Test
	@DisplayName("Test des Konstruktors: nenner=0")
	public final void testConstructorBruchIntNenner0() {
		int zaehler = 1;
		int nenner = 0;
		assertThrows(ArithmeticException.class, ()->
				new Bruch(zaehler,nenner));
		
	}

	@Test
	@DisplayName("Test der Objekt-Methode: setZaehler=3")
	public final void testSetZaehler() {
		int zaehler = 3;
		b.setZaehler(zaehler);
		double expected =(double)zaehler/b.getNenner();
		double actual=b.quotient();
		assertEquals(expected,actual,0.01);
		
	}

	@Test
	@DisplayName("Test der Objekt-Methode: setNenner=3")
	public final void testSetNenner() {
		int nenner = 3;
		b.setNenner(nenner);
		double expected =(double)b.getZaehler()/nenner;
		double actual=b.quotient();
		assertEquals(expected,actual,0.01);
	}
	@Test
	@DisplayName("Test der Objekt-Methode: setNenner=0")
	public final void testSetNenner0() {
		assertThrows(ArithmeticException.class,
				()->b.setNenner(0));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: getZaehler=1")
	public final void testGetZaehler() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		assertEquals(zaehler, b2.getZaehler());
	}

	@Test
	@DisplayName("Test der Objekt-Methode: getNenner=8")
	public final void testGetNenner() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		assertEquals(nenner, b2.getNenner());

	}

	@Test
	@DisplayName("Test der Objekt-Methode: Berechnung Quotient=0,125")
	public final void testQuotient() {
		int zaehler = 1;
		int nenner = 8;
		double expected =(double)zaehler/nenner;
		Bruch b2=new Bruch(zaehler,nenner);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: toString 1/8")
	public final void testToString() {
		int zaehler = 1;
		int nenner = 8;
		String expected =""+zaehler+"/"+nenner;
		Bruch b2=new Bruch(zaehler,nenner);
		String actual=b2.toString();
		assertEquals(expected,actual);
	}


	@Test
	@DisplayName("Test der Objekt-Methode: add bruch 1/8 + 6/16")
	public final void testAddBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		double expected =(double)zaehler/nenner+(double)z2/n2;
		b2.add(new Bruch(z2,n2));
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
		
	}

	@Test
	@DisplayName("Test der Objekt-Methode: add int value1/8 + 6")
	public final void testAddInt() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		double expected =(double)zaehler/nenner+(double)z2;
		b2.add(z2);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: subtract int 1/8 - 6")
	public final void testSubInt() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		double expected =(double)zaehler/nenner-(double)z2;
		b2.sub(z2);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);

	}

	@Test
	@DisplayName("Test der Objekt-Methode: multply int 1/8 * 6")
	public final void testMultiInt() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		double expected =(double)zaehler*z2/nenner;
		b2.multi(z2);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: divide by int 1/8 / 6")
	public final void testDivInt() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		double expected =(double)zaehler/nenner/z2;
		b2.div(z2);
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: divide by zero 1/8 / 0")
	public final void testDivIntException() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 0;
		assertThrows(ArithmeticException.class, 
				()->b2.div(new Bruch(z2)));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: subtract bruch 1/8 - 6/16")
	public final void testSubBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		double expected =(double)zaehler/nenner-(double)z2/n2;
		b2.sub(new Bruch(z2,n2));
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: multiply bruch 1/8 * 6/16")
	public final void testMultiBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		double expected =(double)zaehler/nenner*(double)z2/n2;
		b2.multi(new Bruch(z2,n2));
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: divide by bruch 1/8 / 6/16")
	public final void testDivBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		double expected =(double)zaehler/nenner*(double)n2/z2;
		b2.div(new Bruch(z2,n2));
		double actual=b2.quotient();
		assertEquals(expected,actual,0.01);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: add bruch 1/8 + 0/16")
	public final void testDivBruchException() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 0;
		int n2 = 16;
		assertThrows(ArithmeticException.class, 
				()->b2.div(new Bruch(z2,n2)));

	}

	@Test
	@DisplayName("Test der Klassen-Methode: add bruch 1/8 + 6/16")
	public final void testAddBruchBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		Bruch b3=new Bruch(z2,n2);
		Bruch b4=Bruch.add(b2, b3);
		Bruch b5=new Bruch(1,2);
		assertEquals(b4,b5);
	}

	@Test
	@DisplayName("Test der Klassen-Methode: subtract bruch 1/8 - 6/16")
	public final void testSubBruchBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		Bruch b3=new Bruch(z2,n2);
		Bruch b4=Bruch.sub(b2, b3);
		Bruch b5=new Bruch(-1,4);
		assertEquals(b4,b5);

	}

	@Test
	@DisplayName("Test der Klassen-Methode: multiply bruch 1/8 * 6/16")
	public final void testMultiBruchBruch() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 6;
		int n2 = 16;
		Bruch b3=new Bruch(z2,n2);
		Bruch b4=Bruch.multi(b2, b3);
		Bruch b5=new Bruch(3,64);
		assertEquals(b4,b5);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals bruch 1/8 == 2/16")
	public final void testEqualsTrue() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 2;
		int n2 = 16;
		Bruch b3=new Bruch(z2,n2);
		assertTrue(b2.equals(b3));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals bruch 1/8 != 3/16")
	public final void testEqualsFalse() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 3;
		int n2 = 16;
		Bruch b3=new Bruch(z2,n2);
		assertFalse(b2.equals(b3));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals bruch Bruch(1,8) is not null")
	public final void testEqualsNull() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		assertFalse(b2.equals(null));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals bruch ident ")
	public final void testEqualsIdentical() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		assertTrue(b2.equals(b2));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals mit falschem Typ (Klasse)")
	public final void testEqualsWrongClass() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		assertFalse(b2.equals(new Object()));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals mit falschem nenner 1/8 != 1/9")
	public final void testEqualsWrongNenner() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 1;
		int n2 = 9;
		Bruch b3=new Bruch(z2,n2);
		assertFalse(b2.equals(b3));
	}

	@Test
	@DisplayName("Test der Objekt-Methode: equals mit falschem zaehler 1/8 != 2/8")
	public final void testEqualsWrongZaehler() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 2;
		int n2 = 8;
		Bruch b3=new Bruch(z2,n2);
		assertFalse(b2.equals(b3));
	}
	@Test
	@DisplayName("Test der Objekt-Methode: compare to lower bruch 1/8 < 2/8")
	public final void testComparetoLower() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 2;
		int n2 = 8;
		Bruch b3=new Bruch(z2,n2);
		boolean expected=b2.compareTo(b3)<0;
		assertTrue(expected);
	}
	@Test
	@DisplayName("Test der Objekt-Methode: compare to greather bruch 2/8 > 1/8")
	public final void testComparetoGreather() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 2;
		int n2 = 8;
		Bruch b3=new Bruch(z2,n2);
		boolean expected=b3.compareTo(b2)>0;
		assertTrue(expected);
	}
	@Test
	@DisplayName("Test der Objekt-Methode: compare to equal bruch 1/8 == 1/8")
	public final void testComparetoEqual() {
		int zaehler = 1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 1;
		int n2 = 8;
		Bruch b3=new Bruch(z2,n2);
		boolean expected=b3.compareTo(b2)==0;
		assertTrue(expected);
	}

	@Test
	@DisplayName("Test der Objekt-Methode: Vorzeichenwechsel -1/8 == 1/-8")
	public final void testVorzeichenwechsel() {
		int zaehler = -1;
		int nenner = 8;
		Bruch b2=new Bruch(zaehler,nenner);
		int z2 = 1;
		int n2 = -8;
		Bruch b3=new Bruch(z2,n2);
		boolean expected=b3.compareTo(b2)==0;
		assertTrue(expected);
	}

	
}
